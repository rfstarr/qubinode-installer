- name: Deploy RHEL server VM
  hosts: localhost
  become: yes
  gather_facts: yes
  vars_files:
    - vars/all.yml
    - vars/vault.yml
    - vars/idm.yml
 
  vars:
    vm_name: qbn-rhelsrv01
    vm_cpu: 2
    vm_memory: 2048
    vm_root_disk_size: 60G
    vm_teardown: false
    vm_recreate: false
    inventory_group: tower
    extra_storage: 
      - size: 0
        enable: false
    enable: true
  environment:
    IPA_HOST: "{{ ipa_host }}"
    IPA_USER: "{{ idm_admin_user }}"
    IPA_PASS: "{{ idm_admin_pwd }}"
    IPA_TIMEOUT: 40

  tasks:
    - name: Create RHEL Server
      include_role:
        name: deploy-kvm-vm
      tags: rhel_vm

    - name: set dns record state
      set_fact:
        dns_a_result: "none"
        dns_ptr_result: "none"
        record_state: "{{ 'absent' if vm_teardown|bool else 'present' }}"
      tags: create_dns_records

    - name: check if A record for {{ vm_name }} exist
      debug: msg="{{ lookup('dig', vm_name )}}"
      register: dns_a_result
      when: not vm_teardown|bool

    - name: Create/Delete {{ vm_name }} A Records
      ipa_dnsrecord:
        zone_name: "{{ domain }}"
        record_name: "{{ hostvars[vm_name].inventory_hostname }}"
        record_type: A
        record_ttl: 300
        record_value: "{{ hostvars[vm_name].ansible_host }}"
        state: "{{ record_state }}"
        validate_certs: no
      tags: create_dns_records
  
    - name: check if PTR record for {{ vm_name }} exist
      vars:
        ip: "{{ hostvars[vm_name].ansible_host }}"
      debug: msg="{{ lookup('dig', ip + '/PTR' )}}"
      register: dns_ptr_result
      
    - name: Create/Delete {{ vm_name }} PTR Records
      ipa_dnsrecord:
        zone_name: "{{ qubinode_ptr }}"
        record_name: "{{ hostvars[vm_name].ansible_host.split('.')[3:4] | join('.') }}"
        record_type: PTR
        record_ttl: 300
        record_value: "{{ hostvars[vm_name].inventory_hostname }}.{{ domain }}."
        state: "{{ record_state }}"
        validate_certs: no
      tags: create_dns_records
     
    - name: REMOVE|ensure {{ vm_name }} is removed from inventory
      lineinfile:
        path: "{{ inventory_file }}"
        regexp: "^{{ vm_name }}"
        state: absent
      when: vm_teardown|bool
